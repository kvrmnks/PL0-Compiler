PROG -> SUBPROG
SUBPROG -> CONST VARIABLE PROCEDURE M_STATEMENT STATEMENT
M_STATEMENT -> ^ @ down
CONST -> CONST_ ;
CONST -> ^
CONST_ -> const CONST_DEF
CONST_ -> CONST_ , CONST_DEF
CONST_DEF -> ID = UINT @ down
UINT -> num @ down auto
VARIABLE -> VARIABLE_ ;
VARIABLE -> ^
VARIABLE_ -> var ID @ down
VARIABLE_ -> VARIABLE_ , ID @ down
ID -> id @ down auto
PROCEDURE -> PROCEDURE_
PROCEDURE -> ^
PROCEDURE_ -> PROCEDURE_ PROC_HEAD SUBPROG ;
PROCEDURE_ -> PROC_HEAD SUBPROG ;
PROC_HEAD -> procedure ID ; @ down
STATEMENT -> ASSIGN
STATEMENT -> COND
STATEMENT -> WHILE
STATEMENT -> CALL
STATEMENT -> READ
STATEMENT -> WRITE
STATEMENT -> COMP
ASSIGN -> ID := EXPR @ down
COMP -> COMP_BEGIN end
COMP_BEGIN -> begin STATEMENT
COMP_BEGIN -> COMP_BEGIN ; STATEMENT
CONDDITION -> EXPR REL EXPR
CONDDITION -> odd EXPR
EXPR -> PLUS_MINUS ITEM @ down
EXPR -> EXPR PLUS_MINUS ITEM @down
EXPR -> ITEM @ down auto
ITEM -> FACTOR @ down auto
ITEM -> ITEM MUL_DIV FACTOR @down
FACTOR -> ID @ down
FACTOR -> UINT @ down auto
FACTOR -> ( EXPR ) @down
PLUS_MINUS -> + @ down auto
PLUS_MINUS -> - @ down auto
MUL_DIV -> * @ down auto
MUL_DIV -> / @ down auto
REL -> = @ down auto
REL -> # @ down auto
REL -> < @ down auto
REL -> <= @ down auto
REL -> > @ down auto
REL -> >= @ down auto
COND -> if CONDDITION then STATEMENT
CALL -> call ID @ down
WHILE -> while CONDDITION do STATEMENT
READ -> READ_BEGIN )
READ_BEGIN -> read ( ID
READ_BEGIN -> READ_BEGIN , ID
WRITE -> WRITE_BEGIN )
WRITE_BEGIN -> write ( ID
WRITE_BEGIN -> WRITE_BEGIN , ID
